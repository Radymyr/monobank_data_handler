import { bot, html } from './initialized.js';
import { getMccDescription } from './mccCodes.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
export function getCurrencyName(currencyCode) {
  const currencies = {
    980: 'UAH',
    840: 'USD',
    978: 'EUR',
    643: 'RUB',
  };
  return currencies[currencyCode] || 'Unknown currency';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
export function getDate(timestamp) {
  const date = new Date(timestamp * 1000);
  return date.toLocaleString('uk-UA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
export function getAmount(amount) {
  return (amount / 100).toFixed(2); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ –≥—Ä–∏–≤–Ω—ã
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export function formatText(fields) {
  const {
    id,
    time,
    description,
    mcc,
    amount,
    balance,
    commissionRate, // –≠—Ç–æ –∫–æ–º–∏—Å—Å–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    hold,
  } = fields;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–º–∞–π–ª–∏–∫–∏
  const mccIcons = {
    5411: 'üõí', // –°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏
    4829: 'üöó', // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    5812: 'üçΩÔ∏è', // –†–µ—Å—Ç–æ—Ä–∞–Ω–∏ —Ç–∞ –∫–∞—Ñ–µ
    5541: '‚õΩ', // –ê–ó–°
    4900: 'üí°', // –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏
    default: 'üí≥', // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  };

  const mccDescription = getMccDescription(mcc);
  const categoryIcon = mccIcons[mcc] || mccIcons.default;

  // –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const status = hold ? '–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  return `
**–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è ‚Ññ ${id}**
–î–∞—Ç–∞ —ñ —á–∞—Å: ${getDate(time)}
–û–ø–∏—Å: ${description}
–ö–∞—Ç–µ–≥–æ—Ä—ñ—è (MCC): ${categoryIcon} ${mccDescription} (${mcc})
–°—É–º–∞: ${getAmount(amount)} –≥—Ä–Ω
–ë–∞–ª–∞–Ω—Å: ${getAmount(balance)} –≥—Ä–Ω
–ö–æ–º—ñ—Å—ñ—è: ${getAmount(commissionRate)} –≥—Ä–Ω
–°—Ç–∞—Ç—É—Å: ${status}
${balance < 200000 ? '\n‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–∏–∂—á–µ 2000 –≥—Ä–Ω.' : ''}
  `;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
export function checkWebhook(request, reply) {
  const chatId = request.params.id;
  reply.status(200).send(`GET request successful with id: ${chatId}`);
}

// –ü–æ–∫–∞–∑ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
export function showHtml(request, reply) {
  reply.status(200).type('text/html').send(html);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
export function validateToken(token) {
  const tokenRegex = /^[a-zA-Z0-9_-]{40,50}$/;
  return tokenRegex.test(token);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
export async function sendToTelegram(request, reply) {
  const chatId = request.params.id;
  const messageBody = request.body;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const monobankResponse = formatText(messageBody.data.statementItem);

  console.log(monobankResponse);

  if (chatId && messageBody) {
    await bot.telegram.sendMessage(chatId, monobankResponse, {
      parse_mode: 'Markdown',
    });
  }

  reply.status(200).send(`POST request successful with id: ${chatId}`);
}
